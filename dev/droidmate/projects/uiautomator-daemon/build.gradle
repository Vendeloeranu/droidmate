// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, jamrozik@st.cs.uni-saarland.de
//
// This file is part of the "DroidMate" project.
//
// www.droidmate.org

def libsDir = file("$projectDir/libs")

/* --- MAKE INTELLIJ IDEA HAPPY ZONE ---

  The code below is here to make sure that when "Refresh all Gradle projects" is hit in IntelliJ IDEA, the source folders
  and dependencies will be properly configured in the IDE.

  This is necessary because this project isn't actually a java project, but it is a wrapper over an ant script:
  see the 'build' task.
*/
import org.droidmate.buildsrc.BuildKt

apply plugin: 'java'

/* The tasks below are pruned and/or disabled as they come from Gradle's java plugin which is applied
  only to make IntelliJ happy and is not fully configured.

  There are more tasks like that that should be disabled, but I hope you know what you are doing.

  Use only "build" and "clean" tasks. */
tasks.build.dependsOn.remove("check")
tasks.build.dependsOn.remove("assemble")
tasks.check.enabled = false
tasks.assemble.enabled = false
tasks.jar.enabled = false

/* "antBuild" and "antClean" tasks are defined below */
tasks.build.dependsOn("antBuild")
tasks.clean.dependsOn("cleanLibCommonAndroidJar", "antClean")

sourceSets {
  main.java.srcDirs = ["src"]
  test.java.srcDirs = []
  main.resources.srcDirs = []
  test.resources.srcDirs = []
  main.output.classesDir = buildDir
  test.output.classesDir = buildDir
}

dependencies {
  compile fileTree(dir: "src")
  ConfigurableFileTree libsDirFileTree = fileTree(dir: libsDir, include: '*.jar', excludes: ['*javadoc.jar', '*sources.jar'])
  /* Making this additional setter call instead of supplying a value in constructor is a workaround for an issue I discovered
    on Nov 23, 2014 in Gradle 2.1. See OneNote "Gradle bugs". */
  libsDirFileTree.setBuiltBy(['pullLibCommonAndroidJar'])
  compile libsDirFileTree

  // Required by IntelliJ; when building with Gradle, the underlying ant script knows this dependency.
  compileOnly files(BuildKt.uiautomator_jar.toString())

  compileOnly files(BuildKt.android_jar.toString())
}

/* --- end of MAKE INTELLIJ IDEA HAPPY ZONE --- */

def projectLibCommon = findProject(":projects:lib-common-android")
def antBuildFileName = "build-customized.xml"

task pullLibCommonAndroidJar(type: Copy, dependsOn: ":projects:lib-common-android:jar") { Copy copy ->
  
  copy.from(projectLibCommon.jar.archivePath as File).into(libsDir)
}

task cleanLibCommonAndroidJar(type: Delete) {
  group = "build"
  delete new File(libsDir, projectLibCommon.jar.archiveName as String)
}
/*
  Note: the underlying ant script inputs all files in libs dir, so if some additional .jar files will be
  found in it (e.g. with sources), the 'antBuild' task will fail to produce output due to classpath clashes.
 */
task antBuild(dependsOn: "pullLibCommonAndroidJar") {
  group = "build"
  description = "Runs the underlying customized ant build file with 'ant build'. The ant file was originally " +
    "generated with Android SDK."

  inputs.files configurations.compile
  outputs.dir buildDir

  doLast {
    int exitValue = BuildKt.executeCommand(
      "${project.name} ant build",
      "ant -f $projectDir/$antBuildFileName build"
    )
    if (exitValue != 0)
      throw new GradleException("Failed to build uiautomator-daemon.jar (ant script return code != 0)")
  }
}

task antClean {
  group = "build"
  description = "Runs 'ant clean'."

  doLast {
    BuildKt.executeCommand(
      "${project.name} ant clean",
      "ant -f $projectDir/$antBuildFileName clean"
    )
  }
}