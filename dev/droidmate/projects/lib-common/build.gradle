import com.konradjamrozik.IterableExtensions
import org.droidmate.buildsrc.BuildKt

// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, jamrozik@st.cs.uni-saarland.de
//
// This file is part of the "DroidMate" project.
//
// www.droidmate.org
/*
  This project contains classes reused by multiple projects, none of which are run on an Android device.
  Because none of them are run on an Android Device, the classes in this project can and are compiled with Groovy and Java 8.
*/

apply plugin: 'groovy'
apply plugin: 'project-report'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {

  compile "com.github.konrad-jamrozik:utilities:$utilities_version"

  // Groovy lang
  compile 'org.codehaus.groovy:groovy-all:2.4.6'

  // General utils
  compile 'org.apache.commons:commons-exec:1.2'
  compile 'org.apache.commons:commons-lang3:3.3'
  compile 'commons-io:commons-io:2.4'

  // Command line parsing
  compile 'net.sf.jopt-simple:jopt-simple:4.9'

  // Logging
  compile 'ch.qos.logback:logback-classic:1.0.13'
  compile 'ch.qos.logback:logback-core:1.0.13'
  compile 'org.slf4j:slf4j-api:1.7.6'

  // Override guava 16 used by jimfs (added below)
  compile 'com.google.guava:guava:19.0'

  // Filesystem stubbing
  compile 'com.google.jimfs:jimfs:1.0'

  testCompile group: 'junit', name: 'junit', version: '4.12'
}

File resDir = IterableExtensions.findSingle(sourceSets.main.resources.srcDirs)
File buildConstantsFile = new File(resDir, "buildConstants.properties")

task writeBuildConstantsProperties() { Task it ->
  
  it.outputs.file(buildConstantsFile)
  
  doLast {
    buildConstantsFile.withWriter {BufferedWriter wr ->
      ([
        "apk_inliner_param_input"                    : BuildKt.apk_inliner_param_input,
        "apk_inliner_param_output_dir"               : BuildKt.apk_inliner_param_output_dir,
        "apk_inliner_param_input_default"            : BuildKt.apk_inliner_param_input_default.toString(),
        "apk_inliner_param_output_dir_default"       : BuildKt.apk_inliner_param_output_dir_default.toString(),
        "AVD_dir_for_temp_files"                     : BuildKt.AVD_dir_for_temp_files,
        "jarsigner_relative"                         : BuildKt.jarsigner_relative,
        "apk_fixtures"                               : BuildKt.apk_fixtures,
        "monitored_inlined_apk_fixture_name"         : BuildKt.monitored_inlined_apk_fixture_name,
        "monitor_generator_output_relative_path"     : BuildKt.monitor_generator_output_relative_path,
        "test_temp_dir_name"                         : BuildKt.test_temp_dir_name,
        "apks_dir"                                   : BuildKt.apks_dir,
        "appguard_apis_txt"                          : BuildKt.appguard_apis_txt,
        "monitor_generator_res_name_monitor_template": BuildKt.monitor_generator_res_name_monitor_template,
        "aapt_command_relative"                      : BuildKt.aapt_command_relative,
        "adb_command_relative"                       : BuildKt.adb_command_relative
      ]).each {key, value ->
        wr.writeLine(key + "=" + value)
      }
    }
  }
}

clean.configure { doLast { file(buildConstantsFile).delete() } }

processResources.dependsOn("writeBuildConstantsProperties")

apply from: project(":projects").file("maven.gradle")

task testi(type: Test, dependsOn: "testClasses") { Test it ->
  it.group = "verification"
  it.description = "Interactive test"
  it.filter.includeTest "*BuildConstantsTest", "*"
}

task debug { Task it ->
  it.group = "help"
  doLast {
    println "sourceSets.main.compileClasspath"
    sourceSets.main.compileClasspath.each { println it}
    println "sourceSets.main.runtimeClasspath"
    sourceSets.main.runtimeClasspath.each { println it}
  }
}