// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, jamrozik@st.cs.uni-saarland.de
//
// This file is part of the "DroidMate" project.
//
// www.droidmate.org

def libsDir = file("$projectDir/libs")

/* --- MAKE IntelliJ IDEA HAPPY ZONE ---

  The code below is here to make sure that when "Refresh all Gradle projects" is hit in IntelliJ IDEA, the source folders
  and dependencies will be properly configured in the IDE.

  This is necessary because this project isn't actually a java project, but it is a wrapper over an ant script:
  see the 'build' task.
*/
import org.droidmate.init.InitConstants

apply plugin: 'java'

sourceSets {
  main.java.srcDirs = ["src"]
  test.java.srcDirs = []
  main.resources.srcDirs = []
  test.resources.srcDirs = []
  main.output.classesDir = buildDir
  test.output.classesDir = buildDir
}

dependencies {
  compile fileTree(dir: "src")
  ConfigurableFileTree libsDirFileTree = fileTree(dir: libsDir, include: '*.jar', excludes: ['*javadoc.jar', '*sources.jar'])
  /* Making this additional setter call instead of supplying a value in constructor is a workaround for an issue I discovered
    on Nov 23, 2014 in Gradle 2.1. See OneNote "Gradle bugs". */
  libsDirFileTree.setBuiltBy(['pullLibCommonAndroidJar'])
  compile libsDirFileTree
  // Required by IntelliJ; when building with Gradle, the underlying ant script knows this dependency.
  File uiautomatorFile = new File(InitConstants.android_platform_dir.toString(), "uiautomator.jar")
  assert uiautomatorFile.file
  compile files(uiautomatorFile)

  File androidJarFile = new File(InitConstants.android_platform_dir.toString(), "android.jar")
  assert androidJarFile.file
  compile files(androidJarFile)
}

task classes (overwrite: true) {
  /* This task definition is overwritten with "do nothing" here. This is task coming from Gradle's java plugin which is applied
  only to make IntelliJ happy and is not fully configured. */
}


task test (overwrite: true, type: Test) {
  /* This task definition is overwritten with "do nothing" here. This is task coming from Gradle's java plugin which is applied
  only to make IntelliJ happy and is not fully configured. */

  // Workaround for GRADLE-1682. See http://stackoverflow.com/a/14947906/986533
  // includes = ['**/MonitorGeneratorFrontendTest.class']
  // Test not included because the test shouldn't be run as part of a test suite.
  includes = ['']

}

/* --- end of MAKE IntelliJ IDEA HAPPY ZONE --- */

def projectLibCommon = findProject(":projects:lib-common-android");
def antBuildFileName = "build-customized.xml"

task pullLibCommonAndroidJar(dependsOn: ":projects:lib-common-android:jar") {

  def copyFrom = projectLibCommon.jar.archivePath
  def copyTo = libsDir

  inputs.file copyFrom
  outputs.file "${copyTo.path}/${projectLibCommon.jar.archiveName}"

  doLast {
    //noinspection GroovyAssignabilityCheck
    def copyResult = copy {
      from copyFrom
      into copyTo
    }
    if (!copyResult.didWork)
      throw new GradleException("Failed to copy file.\n" +
        "Path of file to be copied: $copyFrom\n" +
        "Path of destination dir: $copyTo")

  }
}

/*
  Note: The 'dependsOn' clause is redundant with 'builtBy' property in the 'dependencies' closure,
  but it is left here for documentation purposes.

  Note: the underlying ant script inputs all files in libs dir, so if some additional .jar files will be
  found in it (e.g. with sources), the 'antBuild' task will fail to produce output due to classpath clashes.
 */
task antBuild(dependsOn: [pullLibCommonAndroidJar]) {
  group = "build"
  description = "Runs the underlying customized ant build file, generated with Android SDK."

  inputs.files configurations.compile
  outputs.dir buildDir

  doLast {
    int exitValue = utils.executeCommand(
      "${project.name} ant build",
      "ant -f $projectDir/$antBuildFileName build"
    )
    if (exitValue != 0)
      throw new GradleException("Failed to build uiautomator-daemon.jar (ant script return code != 0)")
  }
}

task build(overwrite: true, dependsOn: antBuild) {
  group = "build"
  description = "Runs the underlying customized ant build file, generated with Android SDK."
}

task clean(overwrite: true) {
  group = "build"
  description = "Runs 'ant clean'."
  doLast {
    utils.executeCommand(
      "${project.name} ant clean",
      "ant -f $projectDir/$antBuildFileName clean"
    )
  }
}