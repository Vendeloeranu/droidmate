// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, jamrozik@st.cs.uni-saarland.de
//
// This file is part of the "DroidMate" project.
//
// www.droidmate.org

import org.droidmate.buildsrc.BuildKt

apply plugin: 'groovy'
apply from: project(":projects").file("debug.gradle")

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// For explanations of these commands, please see :command project build.gradle
configurations {forceJunitPriority}
sourceSets.test.runtimeClasspath = configurations.forceJunitPriority + sourceSets.test.runtimeClasspath
sourceSets.test.compileClasspath = configurations.forceJunitPriority + sourceSets.test.compileClasspath

dependencies {

  compile project(":projects:lib-common")
  compile project(":projects:lib-kotlin")

  compile 'org.codehaus.groovy:groovy-all:2.4.6'

  compile 'ch.qos.logback:logback-classic:1.0.13'
  compile 'ch.qos.logback:logback-core:1.0.13'
  compile 'org.slf4j:slf4j-api:1.7.6'

  forceJunitPriority 'junit:junit:4.12'
  testCompile 'junit:junit:4.12'

  compile project(":projects:monitor-template")
}

//region Tasks to setup resources necessary for a call to MonitorGeneratorFrontend

// Ensure BuildKt.appguard_apis_txt is available at runtime as a resource. 
processResources.configure { Copy copy ->

  File appguardApisTxt = project(":projects").file("resources/${BuildKt.appguard_apis_txt}")
  assert appguardApisTxt.file

  evaluationDependsOn(":projects:monitor-template")
  // !!! DUPLICATION WARNING !!! with the file name and file location of class org.droidmate.monitor_template_src.MonitorJavaTemplate
  File monitorJavaTemplateSource = findProject(":projects:monitor-template").sourceSets.main.java.find { it.name == "MonitorJavaTemplate.java" } as File
  assert monitorJavaTemplateSource.file

  copy.from(appguardApisTxt, monitorJavaTemplateSource).rename(monitorJavaTemplateSource.name, BuildKt.monitor_generator_res_name_monitor_template)
}

//endregion

//region Tasks calling MonitorGeneratorFrontend, outputting generatedMonitor_apiXX
apply plugin: 'application'
mainClassName = "org.droidmate.monitor.MonitorGeneratorFrontend"
JavaExec runTask = tasks.run as JavaExec
def generateMonitor = { JavaExec je, List<String> args, File generatedMonitor ->
  je.group = "build"
  ["main", "classpath", "standardOutput"].each {je."$it" = runTask."$it"}

  je.args = args
  // Output is not muted as we want to see in Gradle build log output of org.droidmate.monitor.MonitorGeneratorFrontend.loadMonitorHookIfAvailableElseNull
  //je.standardOutput = new ByteArrayOutputStream() // Mute the task stdout
  je.outputs.file generatedMonitor

  je.doLast { assert generatedMonitor.file }
}

def generatedMonitor = {int apiLevel ->
  // KJA remove if
  if (apiLevel == 19)
    new File(runTask.workingDir, BuildKt.monitor_generator_output_relative_path_api19)
  else if (apiLevel == 23)
    new File(runTask.workingDir, BuildKt.monitor_generator_output_relative_path_api23)
  else assert false;
}
task generateMonitor_api19(type: JavaExec) {generateMonitor(it as JavaExec, ["api19"], generatedMonitor(19)) }
task generateMonitor_api23(type: JavaExec) {generateMonitor(it as JavaExec, ["api23"], generatedMonitor(23)) }

//endregion

evaluationDependsOn(":projects:monitor-hook")
Jar monitorHookJarTask = findProject(":projects:monitor-hook").jar as Jar

evaluationDependsOn(":projects:lib-common")
Jar libCommonJarTask = findProject(":projects:lib-common").jar as Jar

File monitorApkScaffoldingDir = project(":projects").file("monitor-apk-scaffolding")
assert monitorApkScaffoldingDir.directory


def copyFileWithRename = {File copiedFile, File targetFile ->
  assert targetFile.parentFile.directory
  copy { it.from(copiedFile).into(targetFile.parent).rename { targetFile.name }}
}

def assembleApk = {GradleBuild gradleBuildTask, int apiLevel ->
  File monitorApkScaffoldingBuildGradle = new File(monitorApkScaffoldingDir, "build.gradle")
  assert monitorApkScaffoldingBuildGradle.file
  gradleBuildTask.buildFile = monitorApkScaffoldingBuildGradle
  gradleBuildTask.tasks = ["assembleApi$apiLevel".toString()]
}

File libsBuilt = new File(monitorApkScaffoldingDir, "libs_built")
def prepareMonitorBuild_common = {
  delete libsBuilt
  copy {it.from monitorHookJarTask.archivePath into libsBuilt}
  copy {it.from libCommonJarTask.archivePath into libsBuilt}
}

def monitorJava = { int apiLevel -> new File(monitorApkScaffoldingDir, "src/api$apiLevel/java/org/droidmate/monitor/Monitor.java") }
File apkScaffoldingOutput = new File(monitorApkScaffoldingDir, "build")
def apkScaffoldingOutputApk = { int apiLevel -> new File(apkScaffoldingOutput, "outputs/apk/monitor-apk-scaffolding-api$apiLevel-release-unsigned.apk") }
def monitorApk = { int apiLevel -> new File(buildDir, "monitor_api${apiLevel}.apk") }

def buildMonitorApk = { GradleBuild task, int apiLevel ->

  task.dependsOn([libCommonJarTask, monitorHookJarTask, tasks.getByName("generateMonitor_api$apiLevel")])
  
  task.group = "build"

  task.inputs.files libCommonJarTask
  task.inputs.files monitorHookJarTask
  task.inputs.files tasks.getByName("generateMonitor_api$apiLevel")
  
  File libsApi = new File(monitorApkScaffoldingDir, "libs_api$apiLevel")
  assert libsApi.directory
  task.inputs.files fileTree(dir: libsApi, include: '**')

  task.outputs.file monitorApk(apiLevel)

  task.doFirst {
    prepareMonitorBuild_common()
    copyFileWithRename(generatedMonitor(apiLevel), monitorJava(apiLevel))
    assert monitorJava(apiLevel).file
  }
  assembleApk(task, apiLevel)
  task.doLast { copyFileWithRename(apkScaffoldingOutputApk(apiLevel), monitorApk(apiLevel)) }
}

task buildMonitorApk_api19(type: GradleBuild) {buildMonitorApk(it as GradleBuild, 19) }
task buildMonitorApk_api23(type: GradleBuild) {buildMonitorApk(it as GradleBuild, 23) }

clean.configure {
  
  delete generatedMonitor(19)
  delete generatedMonitor(23)
  assert generatedMonitor(19).parent ==  generatedMonitor(23).parent
  delete generatedMonitor(19).parent

  delete monitorJava(19)
  delete monitorJava(23)

  delete libsBuilt
  delete apkScaffoldingOutput

  delete monitorApk(19)
  delete monitorApk(23)
}

build.dependsOn "buildMonitorApk_api19", "buildMonitorApk_api23"

test.configure {

  // Workaround for GRADLE-1682. See http://stackoverflow.com/a/14947906/986533
  // includes = ['**/MonitorGeneratorFrontendTest.class']
  // Test not included because the test shouldn't be run as part of a test suite.
  includes = ['']

}
