// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, jamrozik@st.cs.uni-saarland.de
//
// This file is part of the "DroidMate" project.
//
// www.droidmate.org

import org.droidmate.init.InitConstants

import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'groovy'
apply plugin: 'project-report' // http://www.gradle.org/docs/current/userguide/project_reports_plugin.html
apply plugin: 'application'

mainClassName = "org.droidmate.frontend.DroidmateFrontend"

run {
  workingDir rootDir

  java.nio.file.Path argsFile = Paths.get("$rootDir/args.txt")
  if (Files.exists(argsFile))
  {
    List<String> appArgs = argsFile.text.readLines().first().split(" ") as List<String>
    args appArgs
  }
}

compileJava.sourceCompatibility = JavaVersion.VERSION_1_8
compileJava.targetCompatibility = JavaVersion.VERSION_1_8

//region Dependencies


/*
  Workaround for a bug causing tests run from Gradle to fail. Source of the workaround: [1]

  Suspected cause of the bug:
    Because project(":projects:lib-android") has android.jar as a transitive dependency, running tests
    from Gradle caused JUnit to throw "Stub!" from Assert method.

  [1] http://stackoverflow.com/a/7253941/986533
  [2] http://stackoverflow.com/questions/2422378/intellij-idea-with-junit-4-7-junit-version-3-8-or-later-expected
  [3] https://docs.gradle.org/2.5/release-notes#changes-in-ide-classpath-generation
      Linked from: https://youtrack.jetbrains.com/issue/IDEA-125971#comment=27-1087279
  [4] https://youtrack.jetbrains.com/issue/IDEA-148402
      Lined fromhttps://youtrack.jetbrains.com/issue/IDEA-125971#comment=27-1267028
 */
configurations {forceJunitPriority}
sourceSets.test.runtimeClasspath = configurations.forceJunitPriority + sourceSets.test.runtimeClasspath
sourceSets.test.compileClasspath = configurations.forceJunitPriority + sourceSets.test.compileClasspath


/*
 This project uses test artifacts of core project.
 WISH this is a hack. Correct solution is described here: http://stackoverflow.com/a/15361666/986533
 */
evaluationDependsOn(":projects:core")

dependencies {

  forceJunitPriority 'junit:junit:4.12'
  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:hamcrest-core:1.3'
  // https://discuss.gradle.org/t/multiproject-testcompile-dependencies-not-seen-by-dependant-project/6779
  // http://stackoverflow.com/questions/5644011/multi-project-test-dependencies-with-gradle
  testCompile project(":projects:core").sourceSets.test.output
  compile project(":projects:core")
  compile project(":projects:reporter")
}


//endregion Dependencies

test {

 /* The tests have to be run from root project dir (droidmate) for the classpaths to be properly resolved.

  API reference:
  workingDir  http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html
  rootDir     http://www.gradle.org/docs/current/dsl/org.gradle.api.Project.html
  */
  workingDir rootDir

  /* Lurking bug: GRADLE-1682.

  Currently the bug doesn't manifest itself, but if you run into "superClassName is empty", you bumped into it.

  Reference:
  http://stackoverflow.com/questions/14814837/gradle-test-fails-with-error
  http://stackoverflow.com/questions/11129401/debug-gradle-plugins-with-intellij/11129708#11129708
  http://issues.gradle.org/browse/GRADLE-1682
  */
  includes = ['**/FastRegressionTestSuite.class']


}

SourceDirectorySet testResDirs = project(":projects:core").sourceSets.test.resources
assert testResDirs.srcDirs.size() == 1
File testResDir = testResDirs.srcDirs[0]
assert testResDir.path.endsWith("test" + File.separator + "resources")
File apkFixturesDir = new File(testResDir, InitConstants.apk_fixtures)
assert apkFixturesDir.directory
task testDevice(type: Test) {

  inputs.dir apkFixturesDir.absolutePath

  workingDir rootDir

  includes = ['**/RequiresDeviceTestSuite.class']

}