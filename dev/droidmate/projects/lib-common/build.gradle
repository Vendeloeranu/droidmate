// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, jamrozik@st.cs.uni-saarland.de
//
// This file is part of the "DroidMate" project.
//
// www.droidmate.org
/*
  This project contains classes reused by multiple projects, some of which are run on an Android device.
  Because some of them are run on an Android Device, the classes in this project have to be compiled with Java 7, not Java 8.
  
  Even though this project uses Groovy, it can still run on Android Device. Not sure why, maybe because at runtime there are no
  direct calls to methods from Groovy SDK.
*/

import com.konradjamrozik.IterableExtensions
import org.droidmate.buildsrc.BuildKt

apply plugin: 'groovy'
apply plugin: 'project-report'

/* 
   This project has to be built with Java 7. Otherwise the ant call from :projects:monitor-generator:buildMonitorApk task:
   
     ant -f repo/dev/droidmate/projects/monitor-generator/monitor-apk-scaffolding/build.xml debug
     
   fails with:

       [dx] UNEXPECTED TOP-LEVEL EXCEPTION:
       [dx] com.android.dx.cf.iface.ParseException: bad class file magic (cafebabe) or version (0034.0000)
*/
sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7
compileGroovy.configure { GroovyCompile gc ->
  // See explanation of this in build.gradle of 'monitor-template' project.
  gc.options.compilerArgs += "-Xlint:-options"
}

dependencies {

  compile("com.github.konrad-jamrozik:utilities:$utilities_version") {
    exclude group: "org.slf4j", module: "slf4j-simple"
  }

  compile 'org.codehaus.groovy:groovy-all:2.4.6'

  compile 'org.apache.commons:commons-exec:1.2'
  compile 'org.apache.commons:commons-lang3:3.3'
  compile 'commons-io:commons-io:2.4'

  compile 'net.sf.jopt-simple:jopt-simple:4.9'

  compile 'ch.qos.logback:logback-classic:1.0.13'
  compile 'ch.qos.logback:logback-core:1.0.13'
  compile 'org.slf4j:slf4j-api:1.7.6'

  compile 'com.google.guava:guava:19.0'

  compile 'com.google.jimfs:jimfs:1.0'

  testCompile 'junit:junit:4.12'
}

File resDir = IterableExtensions.findSingle(sourceSets.main.resources.srcDirs)
File buildConstantsFile = new File(resDir, "buildConstants.properties")

task writeBuildConstantsProperties() { Task it ->
  
  it.outputs.file(buildConstantsFile)
  
  doLast {

    // Map constants used in both Gradle build scripts and in the compiled classes to a resource file. This way the constants will
    // be available to the compiled classes in a stand-alone deployment, without the gradle build scripts.
    //
    // Do not use Groovy map initializer syntax to define the map due to a known issue: 
    // https://youtrack.jetbrains.com/issue/IDEA-155257
    //
    Map<String, String> map = [:]
    map["apk_inliner_param_input"] = BuildKt.apk_inliner_param_input
    map["apk_inliner_param_output_dir"] = BuildKt.apk_inliner_param_output_dir
    map["apk_inliner_param_input_default"] = BuildKt.apk_inliner_param_input_default.toString()
    map["apk_inliner_param_output_dir_default"] = BuildKt.apk_inliner_param_output_dir_default.toString()
    map["AVD_dir_for_temp_files"] = BuildKt.AVD_dir_for_temp_files
    map["jarsigner_relative"] = BuildKt.jarsigner_relative
    map["apk_fixtures"] = BuildKt.apk_fixtures
    map["monitored_inlined_apk_fixture_name"] = BuildKt.monitored_inlined_apk_fixture_name
    map["monitor_generator_output_relative_path"] = BuildKt.monitor_generator_output_relative_path
    map["test_temp_dir_name"] = BuildKt.test_temp_dir_name
    map["appguard_apis_txt"] = BuildKt.appguard_apis_txt
    map["dir_name_temp_extracted_resources"] = BuildKt.dir_name_temp_extracted_resources
    map["monitor_generator_res_name_monitor_template"] = BuildKt.monitor_generator_res_name_monitor_template
    map["aapt_command_relative"] = BuildKt.aapt_command_relative
    map["adb_command_relative"] = BuildKt.adb_command_relative

    buildConstantsFile.withWriter {BufferedWriter wr ->
      map.each {key, value ->
        wr.writeLine(key + "=" + value)
      }
    }
  }
}

clean.configure { doLast { file(buildConstantsFile).delete() } }

processResources.dependsOn("writeBuildConstantsProperties")

apply from: project(":projects").file("maven.gradle")

task testi(type: Test, dependsOn: "testClasses") { Test it ->
  it.group = "verification"
  it.description = "Interactive test"
  it.filter.includeTest "*BuildConstantsTest", "*"
}