// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, jamrozik@st.cs.uni-saarland.de
//
// This file is part of the "DroidMate" project.
//
// www.droidmate.org

package org.droidmate.plugin_hook;

import android.content.Context;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

// !!!!! =================================================================
// !!!!! DO NOT EDIT THIS FILE !!!
// !!!!! =================================================================
// !!!!! Instead, run full gradle rebuild (see README.md) or do:
// !!!!! 
// !!!!!   cd repo/droidmate/dev/droidmate 
// !!!!!   ./gradlew :projects:plugin-api-hook:compileJava 
// !!!!! 
// !!!!! This will generate HookPlugin.java in the same directory as this class. Edit that file instead.

public class HookPluginTemplate implements IHookPlugin
{
  private static File hookOutputFile;
  
  public void hookBeforeApiCall(Context context, String apiLogcatMessagePayload)
  {
    if (hookOutputFile == null)
    {
      // --- DEBUGGING NOTES / WORK IN PROGRESS ---
      // This file will be deleted at the end of DroidMate run unless org.droidmate.configuration.Configuration.uninstallApk 
      // is set to false.
      // Pulling this file will be tricky. See: http://stackoverflow.com/q/18471780/986533
      // Log observed:
      // Created hook plugin output file: /data/user/0/org.droidmate.fixtures.apks.monitored/files/hook_file.txt
      // But when I do:
      //   adb shell
      //   run-as <package_name>
      // I end up in /data/data which has /files dir, but it doesn't have hook_file.txt
      hookOutputFile = new File(context.getFilesDir(), "hook_file.txt");
      
      System.out.println("Created hook plugin output file: "+ hookOutputFile.getAbsolutePath());
    }
    
    System.out.println("hookBeforeApiCall/apiLogcatMessagePayload: "+ apiLogcatMessagePayload);
    
    try
    {
      PrintWriter output = new PrintWriter(new FileWriter(hookOutputFile, true));
      output.println("b-hook: "+apiLogcatMessagePayload);
      output.close();
    } catch (IOException e)
    {
      e.printStackTrace();
    }
  }
  
  public Object hookAfterApiCall(Context context, String apiLogcatMessagePayload, Object returnValue)
  {
    System.out.println("hookAfterApiCall/returnValue: "+ returnValue);
    if (apiLogcatMessagePayload.contains("mthd: getDeviceId"))
    {
      String mockedDevId = "DEV-ID-MOCKED-BY-AFTER-HOOK";
      System.out.println("hookAfterApiCall: replacing deviceId="+returnValue+" with mocked value: "+mockedDevId);
        
      return mockedDevId;
    }
    else
      return returnValue;
  }
}

