// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, jamrozik@st.cs.uni-saarland.de
//
// This file is part of the "DroidMate" project.
//
// www.droidmate.org

import org.droidmate.buildsrc.BuildKt

apply plugin: 'groovy'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// For explanations of these commands, please see :command project build.gradle
configurations {forceJunitPriority}
sourceSets.test.runtimeClasspath = configurations.forceJunitPriority + sourceSets.test.runtimeClasspath
sourceSets.test.compileClasspath = configurations.forceJunitPriority + sourceSets.test.compileClasspath

dependencies {

  compile project(":projects:lib-common")

  compile 'org.codehaus.groovy:groovy-all:2.4.6'

  forceJunitPriority 'junit:junit:4.12'
  testCompile 'junit:junit:4.12'

  compile project(":projects:monitor-template")
}

evaluationDependsOn(":projects:monitor-template")
// !!! DUPLICATION WARNING !!! with the file name and file location of class org.droidmate.monitor_template_src.MonitorJavaTemplate
File monitorJavaTemplateSource = findProject(":projects:monitor-template").sourceSets.main.java.find { it.name == "MonitorJavaTemplate.java" } as File
assert monitorJavaTemplateSource.file

SourceDirectorySet resDirs = sourceSets.main.resources
assert resDirs.srcDirs.size() == 1
File resDir = resDirs.srcDirs[0]

apply plugin: 'application'
mainClassName = "org.droidmate.monitor_generator.MonitorGeneratorFrontend"

tasks.run { JavaExec javaExec ->

  standardOutput = new ByteArrayOutputStream() // Mute the task stdout

  project.ext.runOutput = (javaExec.workingDir as File).toPath().resolve(BuildKt.monitor_generator_output_relative_path).toFile()
  
  outputs.file runOutput

  doLast {
    assert runOutput.isFile()
  }
}

processResources.dependsOn "pullMonitorJavaTemplateSource"

task pullMonitorJavaTemplateSource(type: Copy) {

  from monitorJavaTemplateSource
  into resDir
  rename { BuildKt.monitor_generator_res_name_monitor_template }
}

File monitorApkScaffoldingDir = file "monitor-apk-scaffolding"
assert monitorApkScaffoldingDir.isDirectory()

File libsDir = new File(monitorApkScaffoldingDir, "libs")
File libs_api19_dir = new File(monitorApkScaffoldingDir, "libs_api19")
File libs_api23_dir = new File(monitorApkScaffoldingDir, "libs_api23")

def projectLibCommon = findProject(":projects:lib-common")
task cleanLibsDir(type: Delete) {
  group = "build"
  delete libsDir
}
task pullLibCommonJar(type: Copy, dependsOn: ":projects:lib-common:jar") {Copy copy ->

  copy.from(projectLibCommon.jar.archivePath).into(libsDir)
}

task make_libs_from_libs_api19(type: Copy, dependsOn: "cleanLibsDir") { Copy copy ->
  group = "build"
  copy.from(libs_api19_dir).into(libsDir)
}

task make_libs_from_libs_api23(type: Copy, dependsOn: "cleanLibsDir") { Copy copy ->
  group = "build"
  copy.from(libs_api23_dir).into(libsDir)
}

File monitorJava = new File(monitorApkScaffoldingDir, "src/org/droidmate/monitor_generator/generated/Monitor.java")
assert monitorJava.parentFile.isDirectory()

task copyGeneratedMonitorToScaffolding_api23(type: Copy, dependsOn: "run") { Copy copy ->
  group = "build"

  copy.from project.ext.runOutput
  copy.into monitorJava.parent
  copy.rename new File(BuildKt.monitor_generator_output_relative_path).name, monitorJava.name

  copy.outputs.file monitorJava

  doFirst {assert project.ext.runOutput.isFile()}
  doLast {assert monitorJava.isFile()}
}

tasks.pullLibCommonJar.mustRunAfter(tasks.make_libs_from_libs_api19)
tasks.pullLibCommonJar.mustRunAfter(tasks.make_libs_from_libs_api23)
tasks.antBuildMonitorApk.mustRunAfter(tasks.copyGeneratedMonitorToScaffolding_api19)
tasks.antBuildMonitorApk.mustRunAfter(tasks.copyGeneratedMonitorToScaffolding_api23)

File monitorApkOutputByAnt = file("${monitorApkScaffoldingDir.path}/bin/monitor-apk-debug.apk")
task antBuildMonitorApk(dependsOn: ["pullLibCommonJar"]) {
  group = "build"

  inputs.files monitorJava
  inputs.files fileTree(dir: "${monitorApkScaffoldingDir.path}/libs", include: '**')
  outputs.files monitorApkOutputByAnt
  outputs.dir buildDir

  doLast {

    assert monitorJava.isFile()

    int exitValue = BuildKt.executeCommand(
      "${monitorApkScaffoldingDir.name} ant debug",
      "ant -f ${monitorApkScaffoldingDir.path}/build.xml debug"
    )
    if (exitValue != 0)
      throw new GradleException("Failed to build ${monitorApkScaffoldingDir.name}.")
  }
}

task buildMonitorApk_api19(dependsOn: ["make_libs_from_libs_api19", "copyGeneratedMonitorToScaffolding_api19", "antBuildMonitorApk"]) {
  group = "build"
}

task buildMonitorApk_api23(dependsOn: ["make_libs_from_libs_api23", "copyGeneratedMonitorToScaffolding_api23", "antBuildMonitorApk"]) {
  group = "build"
}

task deployMonitorApk_api19(type: Copy, dependsOn: "buildMonitorApk_api19") {Copy copy ->
  group = "build"
  copy.from(monitorApkOutputByAnt).into(buildDir).rename {"monitor_api19.apk"}
}

task deployMonitorApk_api23(type: Copy, dependsOn: "buildMonitorApk_api23") {Copy copy ->
  group = "build"
  copy.from(monitorApkOutputByAnt).into(buildDir).rename {"monitor_api23.apk"}
}

task cleanMonitorApk() {
  group = "build"
  doLast {
    int exitValue = BuildKt.executeCommand(
      "${monitorApkScaffoldingDir.name} ant clean",
      "ant -f ${monitorApkScaffoldingDir.path}/build.xml clean"
    )
    if (exitValue != 0)
      throw new GradleException("Failed to clean ${monitorApkScaffoldingDir.name}.")

  }
}
task cleanRun(type: Delete) {
  group = "build"
  delete project.ext.runOutput.parent
  delete monitorJava
}

test.configure {

  // Workaround for GRADLE-1682. See http://stackoverflow.com/a/14947906/986533
  // includes = ['**/MonitorGeneratorFrontendTest.class']
  // Test not included because the test shouldn't be run as part of a test suite.
  includes = ['']

}

clean.dependsOn "cleanRun", "cleanMonitorApk", "cleanLibsDir"
build.dependsOn "deployMonitorApk_api23"

// Ensure BuildKt.appguard_apis_txt is available at runtime as a resource. 
processResources.configure { Copy copy -> copy.from(project(":projects").file("resources")) }

apply from: project(":projects").file("debug.gradle")
