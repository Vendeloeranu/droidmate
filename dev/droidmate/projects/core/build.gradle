// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, jamrozik@st.cs.uni-saarland.de
//
// This file is part of the "DroidMate" project.
//
// www.droidmate.org

import org.droidmate.buildsrc.BuildKt

apply plugin: 'groovy'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

//region Dependencies

// See explanation for equivalent lines in ":projects:command:build.gradle"
configurations {forceJunitPriority}
sourceSets.test.runtimeClasspath = configurations.forceJunitPriority + sourceSets.test.runtimeClasspath
sourceSets.test.compileClasspath = configurations.forceJunitPriority + sourceSets.test.compileClasspath

dependencies {

  compile("com.github.konrad-jamrozik:utilities:$utilities_version") {
    exclude group: "org.slf4j", module: "slf4j-simple"
  }

  forceJunitPriority 'junit:junit:4.12'
  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:hamcrest-core:1.3'

  compile project(":projects:lib-common")
  compile project(":projects:lib-common-android")

  compile 'com.beust:jcommander:1.35'
  compile 'com.google.guava:guava:19.0'
  compile 'org.apache.commons:commons-lang3:3.3'
  compile 'commons-io:commons-io:2.4'
  compile 'org.apache.commons:commons-exec:1.2'
  compile 'org.codehaus.groovy:groovy-all:2.4.6'
  compile 'org.slf4j:slf4j-api:1.7.6'
  compile 'ch.qos.logback:logback-classic:1.0.13'
  compile 'ch.qos.logback:logback-core:1.0.13'
  compile 'net.sf.opencsv:opencsv:2.3'

  // For visualizing device GUI model graphs
  compile 'org.graphstream:gs-core:1.3'

  // Filesystem stubbing
  compile 'com.google.jimfs:jimfs:1.0'

}

/*
 This project sometimes has to fire apk-inliner:run. For that, this project needs to know input and output dirs of apk-inliner,
 which is the reason for evaluation dependence.
 */
evaluationDependsOn(":projects:apk-inliner")

/* Note: The 'compile[Test]Java.dependsOn' clauses are redundant with 'builtBy' property in the 'dependencies' closure,
   but they are left here for documentation purposes.
 */
compileGroovy.dependsOn "pullUiaDaemonJar"
processResources.dependsOn "pullMonitorApk"

/*
  This dependency ensures that on "gradlew clean build" all the apk fixtures will be rebuilt as well as the library .jar they
  depend on.
 */
clean.dependsOn "cleanTest"

processTestResources.dependsOn("pullApkFixtures", "inlineMonitoredApkFixture")
//endregion Dependencies

//region Preparation of resources for the 'compileGroovy' task

Project uiaDaemon = findProject(":projects:uiautomator-daemon");
task pullUiaDaemonJar(dependsOn: ":projects:uiautomator-daemon:build") {

  File coreResDir = getCoreResDir()

  def copyFrom = file("${uiaDaemon.buildDir}/${uiaDaemon.name}.jar")
  def copyTo = coreResDir

  inputs.file copyFrom
  outputs.dir copyTo

  doLast {

    assert copyFrom.isFile()

    def copyResult = copy {
      from copyFrom
      into copyTo
    }
    if (!copyResult.didWork)
      throw new GradleException("Failed to copy file(s).\n" +
        "Path of file(s) to be copied: $copyFrom\n" +
        "Path of destination dir: $copyTo")
  }
}

Project monitorGenerator = findProject(":projects:monitor-generator")
task pullMonitorApk(dependsOn: ":projects:monitor-generator:buildMonitorApk") {

  File coreResDir = getCoreResDir()

  def copyFrom = file("${monitorGenerator.buildDir}/monitor.apk")
  def copyTo = coreResDir

  inputs.file copyFrom
  outputs.dir copyTo

  doLast {

    assert copyFrom.isFile()

    def copyResult = copy {
      from copyFrom
      into copyTo
    }
    if (!copyResult.didWork)
      throw new GradleException("Failed to copy file(s).\n" +
        "Path of file(s) to be copied: $copyFrom\n" +
        "Path of destination dir: $copyTo")
  }

}

// endregion Preparation of resources for the 'compileGroovy' task

//region Preparation of resources for the 'test' task: apk fixtures

// !!! DUPLICATION WARNING !!!
// These values have to be the same as the ones used in the gradle scripts of the referenced "apk fixtures" project.
File apkFixturesProjectDir = file("${project.rootDir}/../apk_fixtures_src")
assert apkFixturesProjectDir.directory
File apkFixturesDroidmateStagingDir = new File("${apkFixturesProjectDir.path}/build")
String apkFixturesBuildTask = "stageForDroidmate"
String monitoredApkFixtureName = "MonitoredApkFixture-debug.apk"
// end of DUPLICATION WARNING

JavaExec inlinerExec = project(":projects:apk-inliner").tasks.run as JavaExec

SourceDirectorySet testResDirs = sourceSets.test.resources
assert testResDirs.srcDirs.size() == 1
File testResDir = testResDirs.srcDirs[0]
assert testResDir.path.endsWith("test" + File.separator + "resources")
File apkFixturesDir = new File(testResDir, BuildKt.apk_fixtures)
assert apkFixturesDir.directory

task inlineMonitoredApkFixture(type: JavaExec, dependsOn: "buildApkFixtures") {
  ["main", "classpath", "standardOutput"].each {delegate."$it" = inlinerExec."$it"}

  File inputApk = new File(apkFixturesDroidmateStagingDir, monitoredApkFixtureName)
  args = [
    BuildKt.apk_inliner_param_input, inputApk.canonicalPath,
    BuildKt.apk_inliner_param_output_dir, apkFixturesDir
  ]

  inputs.file inputApk
  outputs.file new File(apkFixturesDir, BuildKt.monitored_inlined_apk_fixture_name)
}

// WISH looks like all the pull- tasks should be of type Copy: http://www.gradle.org/docs/current/userguide/working_with_files.html#sec:copying_files
// WISH where possible, refer to tasks themselves as input/output files of various tasks. See http://www.gradle.org/docs/current/dsl/org.gradle.api.Project.html#org.gradle.api.Project:files%28java.lang.Object[]%29
task pullApkFixtures(type: Copy, dependsOn: "buildApkFixtures") {

  from fileTree(dir: apkFixturesDroidmateStagingDir, include: "*.apk", exclude: monitoredApkFixtureName)
  into apkFixturesDir
}

task buildApkFixtures(type: GradleBuild) {

  buildFile = apkFixturesProjectDir.path + "/build.gradle"
  tasks = [apkFixturesBuildTask]
}

//endregion Preparation of apk fixtures for testing

// Ensure BuildKt.appguard_apis_txt is available at runtime as a resource.
processResources.configure { Copy copy -> copy.from(project(":projects").file("resources")) }

//region Preparation of resources: common code
private File getCoreResDir()
{
  Set<File> coreResDirs = sourceSets.main.resources.srcDirs.findAll {it.path.contains(project.name)}
  assert coreResDirs.size() == 1
  return coreResDirs.find()
}
//endregion

//region cleaning resources

task cleanTest(type: GradleBuild) {

  buildFile = apkFixturesProjectDir.path + "/build.gradle"
  tasks = ["clean"]
}

//endregion

//region Tasks for preparing inlined input apks. These tasks are to be run manually.

task prepareInlinedApks(dependsOn: ":projects:apk-inliner:run") {

  File inlinedApksDir = file("$rootDir/${BuildKt.apks_dir}/inlined")
  if (!inlinedApksDir.isDirectory())
    inlinedApksDir.mkdir()

  def copyFrom = inlinerExec.inlinedApksDir
  def copyTo = inlinedApksDir

  inputs.dir copyFrom
  outputs.dir copyTo

  doLast {

    assert copyFrom.isDirectory()

    def copyResult = copy {
      from copyFrom
      include '*.apk'
      into copyTo
    }
    if (!copyResult.didWork)
      throw new GradleException("Failed to copy file(s).\n" +
        "Path of file(s) to be copied: $copyFrom\n" +
        "Path of destination dir: $copyTo")
  }
}

//endregion

//region Testing tasks

test.configure {

  inputs.dir apkFixturesDir.absolutePath

  /* The tests have to be run from root project dir (droidmate) for the classpaths to be properly resolved.

  API reference:
  workingDir  http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html
  rootDir     http://www.gradle.org/docs/current/dsl/org.gradle.api.Project.html
  */
  workingDir rootDir

   /* Lurking bug: GRADLE-1682. See :projects:command:test doc for more.*/
   includes = ['']
}
//endregion Testing tasks

apply from: project(":projects").file("maven.gradle")
apply from: project(":projects").file("debug.gradle")