// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, jamrozik@st.cs.uni-saarland.de
//
// This file is part of the "DroidMate" project.
//
// www.droidmate.org

import org.droidmate.buildsrc.BuildKt

apply plugin: 'groovy'
apply from: project(":projects").file("debug.gradle")

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// For explanations of these commands, please see :command project build.gradle
configurations {forceJunitPriority}
sourceSets.test.runtimeClasspath = configurations.forceJunitPriority + sourceSets.test.runtimeClasspath
sourceSets.test.compileClasspath = configurations.forceJunitPriority + sourceSets.test.compileClasspath

dependencies {

  compile project(":projects:lib-common")
  compile project(":projects:lib-kotlin")

  compile 'org.codehaus.groovy:groovy-all:2.4.6'

  compile 'ch.qos.logback:logback-classic:1.0.13'
  compile 'ch.qos.logback:logback-core:1.0.13'
  compile 'org.slf4j:slf4j-api:1.7.6'

  forceJunitPriority 'junit:junit:4.12'
  testCompile 'junit:junit:4.12'

  compile project(":projects:monitor-template")
}

evaluationDependsOn(":projects:monitor-template")
// !!! DUPLICATION WARNING !!! with the file name and file location of class org.droidmate.monitor_template_src.MonitorJavaTemplate
File monitorJavaTemplateSource = findProject(":projects:monitor-template").sourceSets.main.java.find { it.name == "MonitorJavaTemplate.java" } as File
assert monitorJavaTemplateSource.file

SourceDirectorySet resDirs = sourceSets.main.resources
assert resDirs.srcDirs.size() == 1
File resDir = resDirs.srcDirs[0]

apply plugin: 'application'
mainClassName = "org.droidmate.monitor_generator.MonitorGeneratorFrontend"

processResources.dependsOn "pullMonitorJavaTemplateSource"

// Ensure BuildKt.appguard_apis_txt is available at runtime as a resource. 
processResources.configure { Copy copy -> copy.from(project(":projects").file("resources")) }

task pullMonitorJavaTemplateSource(type: Copy) { Copy copy ->

  copy.from monitorJavaTemplateSource 
  copy.into resDir
  copy.rename { BuildKt.monitor_generator_res_name_monitor_template }
}

JavaExec runTask = tasks.run as JavaExec
File generatedMonitor_api19 = new File(runTask.workingDir, BuildKt.monitor_generator_output_relative_path_api19)
File generatedMonitor_api23 = new File(runTask.workingDir, BuildKt.monitor_generator_output_relative_path_api23)
def generateMonitor = { JavaExec je, List<String> args, File generatedMonitor ->
  je.group = "build"
  ["main", "classpath", "standardOutput"].each {je."$it" = runTask."$it"}

  je.args = args
  // Output is not muted as we want to see in Gradle build log output of org.droidmate.monitor_generator.MonitorGeneratorFrontend.loadHookPluginIfAvailableElseNull
  //je.standardOutput = new ByteArrayOutputStream() // Mute the task stdout
  je.outputs.file generatedMonitor

  je.doLast { assert generatedMonitor.file }
}

task generateMonitor_api19(type: JavaExec) {JavaExec je -> generateMonitor(je, ["api19"], generatedMonitor_api19) }
task generateMonitor_api23(type: JavaExec) {JavaExec je -> generateMonitor(je, ["api23"], generatedMonitor_api23) }

File monitorApkScaffoldingDir = file "monitor-apk-scaffolding"
assert monitorApkScaffoldingDir.directory

File libsDir = new File(monitorApkScaffoldingDir, "libs")
File libs_api19_dir = new File(monitorApkScaffoldingDir, "libs_api19")
File libs_api23_dir = new File(monitorApkScaffoldingDir, "libs_api23")

File monitorJava = new File(monitorApkScaffoldingDir, "src/org/droidmate/monitor_generator/generated/Monitor.java")
assert monitorJava.parentFile.directory
File antOutput = file("${monitorApkScaffoldingDir.path}/bin")
File monitorApkOutputByAnt = file(new File(antOutput,"monitor-apk-debug.apk"))
def antBuildMonitorApk = { Task task ->
  task.doLast {
    assert monitorJava.file
    int exitValue = BuildKt.executeCommand(
      "${monitorApkScaffoldingDir.name} ant debug",
      "ant -f ${monitorApkScaffoldingDir.path}/build.xml debug"
    )
    if (exitValue != 0)
      throw new GradleException("Failed to build ${monitorApkScaffoldingDir.name}.")
  }
}


File projectPropertiesFile = new File(monitorApkScaffoldingDir, "project.properties")
evaluationDependsOn(":projects:plugin-api-hook")
Jar pluginApiHookJarTask = findProject(":projects:plugin-api-hook").jar as Jar
evaluationDependsOn(":projects:lib-common")
Jar libCommonJarTask = findProject(":projects:lib-common").jar as Jar
def prepareAntBuild = { int apiLevel, File apiLibsDir, File monitor -> 
  projectPropertiesFile.text = "target=android-" + apiLevel
  delete libsDir
  copy { it.from apiLibsDir into libsDir }
  copy { it.from pluginApiHookJarTask.archivePath into libsDir }
  copy { it.from libCommonJarTask.archivePath into libsDir }
  copy { it.from monitor into monitorJava.parent rename monitor.name, monitorJava.name }
  
}

File monitor_apk_api19 = new File(buildDir, "monitor_api19.apk")
File monitor_apk_api23 = new File(buildDir, "monitor_api23.apk")
task antBuildMonitorApk_api19(dependsOn: ["generateMonitor_api19", libCommonJarTask, pluginApiHookJarTask]) {Task task ->
  task.group = "build"
  
  task.inputs.files libCommonJarTask
  task.inputs.files pluginApiHookJarTask
  task.inputs.files tasks.generateMonitor_api19
  task.inputs.files fileTree(dir: libs_api19_dir, include: '**')
  task.outputs.file monitor_apk_api19
  
  task.doFirst { prepareAntBuild(19, libs_api19_dir, generatedMonitor_api19) }
  antBuildMonitorApk(task)
  task.doLast { copy { it.from(monitorApkOutputByAnt).into(monitor_apk_api19.parent).rename { monitor_apk_api19.name }}}
}

task antBuildMonitorApk_api23(dependsOn: ["generateMonitor_api23", libCommonJarTask, pluginApiHookJarTask]) {Task task ->
  task.group = "build"
  
  task.inputs.files libCommonJarTask
  task.inputs.files pluginApiHookJarTask
  task.inputs.files tasks."generateMonitor_api23"
  task.inputs.files fileTree(dir: libs_api23_dir, include: '**')
  task.outputs.file monitor_apk_api23
  
  task.doFirst { prepareAntBuild(23, libs_api23_dir, generatedMonitor_api23) }
  antBuildMonitorApk(task)
  task.doLast { copy { it.from(monitorApkOutputByAnt).into(monitor_apk_api23.parent).rename { monitor_apk_api23.name }}}
}

task cleanRun(type: Delete) {
  group = "build"
  delete generatedMonitor_api19
  delete generatedMonitor_api23
  delete monitor_apk_api19
  delete monitor_apk_api23
  assert generatedMonitor_api19.parent == generatedMonitor_api23.parent
  delete generatedMonitor_api19.parent
  delete monitorJava
}
task cleanAntOutput(type: Delete) { group = "build"; delete antOutput }
task cleanLibsDir(type: Delete) {group = "build"; delete libsDir }

clean.dependsOn "cleanRun", "cleanAntOutput", "cleanLibsDir"
build.dependsOn "antBuildMonitorApk_api19", "antBuildMonitorApk_api23"

test.configure {

  // Workaround for GRADLE-1682. See http://stackoverflow.com/a/14947906/986533
  // includes = ['**/MonitorGeneratorFrontendTest.class']
  // Test not included because the test shouldn't be run as part of a test suite.
  includes = ['']

}