// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, jamrozik@st.cs.uni-saarland.de
//
// This file is part of the "DroidMate" project.
//
// www.droidmate.org

package org.droidmate.plugin_hook;

import android.content.Context;

// !!!!! =================================================================
// !!!!! DO NOT EDIT THIS FILE !!!
// !!!!! =================================================================
// !!!!! Instead, run full gradle rebuild (see README.md) or do:
// !!!!! 
// !!!!!   cd repo/droidmate/dev/droidmate 
// !!!!!   ./gradlew :projects:plugin-api-hook:compileJava 
// !!!!! 
// !!!!! This will generate HookPlugin.java in the same directory as this class. Edit that file instead.

// These warnings are suppressed because this class is only a stub serving as an example for actual implementation.
@SuppressWarnings({"unused", "Duplicates", "FieldCanBeLocal"})
public class HookPluginTemplate implements IHookPlugin
{
  private Context context;

  public void init(Context context)
  {
    this.context = context;
  }
  
  public void finalizeHookPlugin() {
    // exampleFinalizeHookPlugin();
  }
  // KJA add a dependency on a way to destructure apilogcatmessagePayload: org.droidmate.common.logcat.ApiLogcatMessage.from(java.lang.String)
  public void hookBeforeApiCall(String apiLogcatMessagePayload)
  {
    // exampleHookBefore(apiLogcatMessagePayload);
  }

  public Object hookAfterApiCall(String apiLogcatMessagePayload, Object returnValue)
  {
    return returnValue;
    // return exampleHookAfter(apiLogcatMessagePayload, returnValue);
  }
  
  private void exampleFinalizeHookPlugin()
  {
    System.out.println("finalizeHookPlugin. Context = "+context);
  }
  
  private void exampleHookBefore(String apiLogcatMessagePayload)
  {
    System.out.println("hookBeforeApiCall/apiLogcatMessagePayload: "+ apiLogcatMessagePayload);
  }

  private Object exampleHookAfter(String apiLogcatMessagePayload, Object returnValue)
  {
    System.out.println("hookAfterApiCall/returnValue: "+ returnValue);
    if (apiLogcatMessagePayload.contains("mthd: getDeviceId"))
    {
      String mockedDevId = "DEV-ID-MOCKED-BY-AFTER-HOOK";
      System.out.println("hookAfterApiCall: replacing deviceId="+returnValue+" with mocked value: "+mockedDevId);
        
      return mockedDevId;
    }
    else
      return returnValue;
  }
}

