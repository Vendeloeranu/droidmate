// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, jamrozik@st.cs.uni-saarland.de
//
// This file is part of the "DroidMate" project.
//
// www.droidmate.org

import org.droidmate.buildsrc.BuildKt

apply plugin: 'groovy'
apply from: project(":projects").file("debug.gradle")

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// For explanations of these commands, please see :command project build.gradle
configurations {forceJunitPriority}
sourceSets.test.runtimeClasspath = configurations.forceJunitPriority + sourceSets.test.runtimeClasspath
sourceSets.test.compileClasspath = configurations.forceJunitPriority + sourceSets.test.compileClasspath

dependencies {

  compile project(":projects:lib-common")
  compile project(":projects:lib-kotlin")

  compile 'org.codehaus.groovy:groovy-all:2.4.6'

  compile 'ch.qos.logback:logback-classic:1.0.13'
  compile 'ch.qos.logback:logback-core:1.0.13'
  compile 'org.slf4j:slf4j-api:1.7.6'

  forceJunitPriority 'junit:junit:4.12'
  testCompile 'junit:junit:4.12'

  compile project(":projects:monitor-template")
}

//region Tasks to setup resources necessary for a call to MonitorGeneratorFrontend

// Ensure BuildKt.appguard_apis_txt is available at runtime as a resource. 
processResources.configure { Copy copy -> copy.from(project(":projects").file("resources")) }

task pullMonitorJavaTemplateSource(type: Copy) { Copy copy ->

  evaluationDependsOn(":projects:monitor-template")
  // !!! DUPLICATION WARNING !!! with the file name and file location of class org.droidmate.monitor_template_src.MonitorJavaTemplate
  File monitorJavaTemplateSource = findProject(":projects:monitor-template").sourceSets.main.java.find { it.name == "MonitorJavaTemplate.java" } as File
  assert monitorJavaTemplateSource.file

  SourceDirectorySet resDirs = sourceSets.main.resources
  assert resDirs.srcDirs.size() == 1
  File resDir = resDirs.srcDirs[0]
  
  copy.from monitorJavaTemplateSource 
  copy.into resDir
  copy.rename { BuildKt.monitor_generator_res_name_monitor_template }
}
processResources.dependsOn "pullMonitorJavaTemplateSource"

//endregion

//region Tasks calling MonitorGeneratorFrontend, outputting generatedMonitor_apiXX
apply plugin: 'application'
mainClassName = "org.droidmate.monitor.MonitorGeneratorFrontend"
JavaExec runTask = tasks.run as JavaExec
def generateMonitor = { JavaExec je, List<String> args, File generatedMonitor ->
  je.group = "build"
  ["main", "classpath", "standardOutput"].each {je."$it" = runTask."$it"}

  je.args = args
  // Output is not muted as we want to see in Gradle build log output of org.droidmate.monitor.MonitorGeneratorFrontend.loadMonitorHookIfAvailableElseNull
  //je.standardOutput = new ByteArrayOutputStream() // Mute the task stdout
  je.outputs.file generatedMonitor

  je.doLast { assert generatedMonitor.file }
}
File generatedMonitor_api19 = new File(runTask.workingDir, BuildKt.monitor_generator_output_relative_path_api19)
File generatedMonitor_api23 = new File(runTask.workingDir, BuildKt.monitor_generator_output_relative_path_api23)
task generateMonitor_api19(type: JavaExec) {generateMonitor(it as JavaExec, ["api19"], generatedMonitor_api19) }
task generateMonitor_api23(type: JavaExec) {generateMonitor(it as JavaExec, ["api23"], generatedMonitor_api23) }

//endregion

evaluationDependsOn(":projects:monitor-hook")
Jar pluginApiHookJarTask = findProject(":projects:monitor-hook").jar as Jar
evaluationDependsOn(":projects:lib-common")
Jar libCommonJarTask = findProject(":projects:lib-common").jar as Jar

File monitor_apk_api19 = new File(buildDir, "monitor_api19.apk")
File monitor_apk_api23 = new File(buildDir, "monitor_api23.apk")

File monitorApkScaffoldingDir = project(":projects").file("monitor-apk-scaffolding")
assert monitorApkScaffoldingDir.directory

File libsBuilt = new File(monitorApkScaffoldingDir, "libs_built")
def prepareMonitorBuild_common = {
  delete libsBuilt
  copy {it.from pluginApiHookJarTask.archivePath into libsBuilt}
  copy {it.from libCommonJarTask.archivePath into libsBuilt}
}

File monitorJava_api19 = new File(monitorApkScaffoldingDir, "src/api19/java/org/droidmate/monitor_generator/generated/Monitor.java")
File monitorJava_api23 = new File(monitorApkScaffoldingDir, "src/api23/java/org/droidmate/monitor_generator/generated/Monitor.java")
assert monitorJava_api19.parentFile.directory
assert monitorJava_api23.parentFile.directory

// KJA merge with copyFileWithRename()
def prepareMonitorBuild_monitor_api19 = { 
  copy {it.from generatedMonitor_api19 into monitorJava_api19.parent rename generatedMonitor_api19.name, monitorJava_api19.name}
}
def prepareMonitorBuild_monitor_api23 = { int 
  copy {it.from generatedMonitor_api23 into monitorJava_api23.parent rename generatedMonitor_api23.name, monitorJava_api23.name}
}

def setupExternalGradleBuildCallForMonitorApk_api19 = {GradleBuild gradleBuildTask ->
  File monitorApkScaffoldingBuildGradle = new File(monitorApkScaffoldingDir, "build.gradle")
  assert monitorApkScaffoldingBuildGradle.file
  gradleBuildTask.buildFile = monitorApkScaffoldingBuildGradle
  gradleBuildTask.tasks = ["assembleApi19"]
}

def setupExternalGradleBuildCallForMonitorApk_api23 = {GradleBuild gradleBuildTask ->
  File monitorApkScaffoldingBuildGradle = new File(monitorApkScaffoldingDir, "build.gradle")
  assert monitorApkScaffoldingBuildGradle.file
  gradleBuildTask.buildFile = monitorApkScaffoldingBuildGradle
  gradleBuildTask.tasks = ["assembleApi23"]
}

File apkScaffoldingOutput = new File(monitorApkScaffoldingDir, "build")
File apkScaffoldingOutputApk_api19 = new File(apkScaffoldingOutput, "outputs/apk/monitor-apk-scaffolding-api19-release-unsigned.apk")
File apkScaffoldingOutputApk_api23 = new File(apkScaffoldingOutput, "outputs/apk/monitor-apk-scaffolding-api23-release-unsigned.apk")

def copyFileWithRename = {Task task, File copiedFile, File targetFile ->
  task.doLast { copy { it.from(copiedFile).into(targetFile.parent).rename { targetFile.name }}}
}

// KJA dry up with api23 task
task buildMonitorApk_api19(type: GradleBuild, dependsOn: ["generateMonitor_api19", libCommonJarTask, pluginApiHookJarTask]) {GradleBuild task ->
  task.group = "build"

  File libsApi19 = new File(monitorApkScaffoldingDir, "libs_api19")
  assert libsApi19.directory

  task.inputs.files libCommonJarTask
  task.inputs.files pluginApiHookJarTask
  task.inputs.files tasks."generateMonitor_api19"
  task.inputs.files fileTree(dir: libsApi19, include: '**')

  task.outputs.file monitor_apk_api19

  task.doFirst {
    prepareMonitorBuild_common()
    prepareMonitorBuild_monitor_api19()
    assert monitorJava_api19.file
  }
  setupExternalGradleBuildCallForMonitorApk_api19(task)
  copyFileWithRename(task, apkScaffoldingOutputApk_api19, monitor_apk_api19)
}
task buildMonitorApk_api23(type: GradleBuild, dependsOn: ["generateMonitor_api23", libCommonJarTask, pluginApiHookJarTask]) {GradleBuild task ->
  task.group = "build"

  File libsApi23 = new File(monitorApkScaffoldingDir, "libs_api23")
  assert libsApi23.isDirectory()

  task.inputs.files libCommonJarTask
  task.inputs.files pluginApiHookJarTask
  task.inputs.files tasks."generateMonitor_api23"
  task.inputs.files fileTree(dir: libsApi23, include: '**')

  task.outputs.file monitor_apk_api23

  task.doFirst {
    prepareMonitorBuild_common()
    prepareMonitorBuild_monitor_api23()
    assert monitorJava_api23.file
  }
  setupExternalGradleBuildCallForMonitorApk_api23(task)
  copyFileWithRename(task, apkScaffoldingOutputApk_api23, monitor_apk_api23)
}

// KJA merge into clean
task cleanRun(type: Delete){
  group = "build"
  
  delete generatedMonitor_api19
  delete generatedMonitor_api23
  delete monitorJava_api19
  delete monitorJava_api23

  assert generatedMonitor_api19.parent == generatedMonitor_api23.parent
  delete generatedMonitor_api19.parent
  delete monitor_apk_api19
  delete monitor_apk_api23

  delete libsBuilt
  delete apkScaffoldingOutput
}

build.dependsOn "buildMonitorApk_api19", "buildMonitorApk_api23"
clean.dependsOn "cleanRun"

test.configure {

  // Workaround for GRADLE-1682. See http://stackoverflow.com/a/14947906/986533
  // includes = ['**/MonitorGeneratorFrontendTest.class']
  // Test not included because the test shouldn't be run as part of a test suite.
  includes = ['']

}
task debug { group = "help"

  doLast { debugTaskIO(tasks.cleanRun) }
}
