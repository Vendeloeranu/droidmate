// DroidMate, an automated execution generator for Android apps.
// Copyright (C) 2012-2016 Konrad Jamrozik
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// email: jamrozik@st.cs.uni-saarland.de
// web: www.droidmate.org
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.logging.TestLoggingContainer

buildscript {
    ext.kotlin_version = '1.2.21'
    repositories {
    mavenCentral()
  }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
  id "org.jetbrains.kotlin.jvm" version "1.2.21"
}

apply plugin: 'kotlin'

ext.kotlin_version = '1.2.21'

ext.utilities_version = '19115bab35'

repositories {
  mavenCentral()
  mavenLocal()
  maven { url "https://jitpack.io" }
}

dependencies {

  compile("com.github.natanieljr:konrads_utilities:$utilities_version") {
    exclude group: "org.slf4j", module: "slf4j-simple"
  }

  compile 'org.zeroturnaround:zt-exec:1.8'

  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
  compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

  testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testCompile "junit:junit:4.12"

}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

test.configure {
  it.testLogging {TestLoggingContainer tl ->
    tl.exceptionFormat = TestExceptionFormat.FULL
    tl.events(TestLogEvent.FAILED, TestLogEvent.SKIPPED)
    tl.showStandardStreams = true
  }
}
