// DroidMate, an automated execution generator for Android apps.
// Copyright (C) 2012-2016 Konrad Jamrozik
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// email: jamrozik@st.cs.uni-saarland.de
// web: www.droidmate.org
import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'groovy'
apply plugin: 'project-report' // http://www.gradle.org/docs/current/userguide/project_reports_plugin.html

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

/*
 This project uses test artifacts of some other projects, so it has to depend on them. Strictly speaking, these calls are necessary
 for dependencies of type "testCompile project(":projects:core").sourceSets.test.output" to work. Otherwise, "sourceSets" would
 not be recognized.
 
 Note that the dependencies of  "testCompileOnly" are for IntelliJ. See http://stackoverflow.com/a/37423632/986533
 
 WISH this is a hack. Correct solution is described here: http://stackoverflow.com/questions/5144325/gradle-test-dependency 

 More:
 http://stackoverflow.com/a/15361666/986533
 https://discuss.gradle.org/t/multiproject-testcompile-dependencies-not-seen-by-dependant-project/6779
 http://stackoverflow.com/questions/5644011/multi-project-test-dependencies-with-gradle
 https://discuss.gradle.org/t/cross-project-test-dependencies/12117/6
 */
// KJA consider fixing this hack with last comment of https://discuss.gradle.org/t/dependencies-on-source-set-of-different-projects/12906/2
evaluationDependsOn(":projects:core")
evaluationDependsOn(":projects:reporter")
evaluationDependsOn(":projects:lib-kotlin")
evaluationDependsOn(":projects:lib-common")

// Necessary to make CI server work. Looks like Groovy doesn't maintain necessary ordering with Kotlin. The build doesn't always
// fail without this dependency, but it fails on travis-ci.
compileTestGroovy.dependsOn ":projects:lib-kotlin:build"

/*
  Workaround for a bug causing tests run from Gradle to fail. Source of the workaround: [1]

  Suspected cause of the bug:
    Because project(":projects:monitor-template") has android.jar as a transitive dependency, running tests
    from Gradle caused JUnit to throw "Stub!" from Assert method.

  [1] http://stackoverflow.com/a/7253941/986533
  [2] http://stackoverflow.com/questions/2422378/intellij-idea-with-junit-4-7-junit-version-3-8-or-later-expected
  [3] https://docs.gradle.org/2.5/release-notes#changes-in-ide-classpath-generation
      Linked from: https://youtrack.jetbrains.com/issue/IDEA-125971#comment=27-1087279
  [4] https://youtrack.jetbrains.com/issue/IDEA-148402
      Lined fromhttps://youtrack.jetbrains.com/issue/IDEA-125971#comment=27-1267028
 */
configurations {forceJunitPriority}
sourceSets.test.runtimeClasspath = configurations.forceJunitPriority + sourceSets.test.runtimeClasspath
sourceSets.test.compileClasspath = configurations.forceJunitPriority + sourceSets.test.compileClasspath

apply plugin: 'application'
mainClassName = "org.droidmate.frontend.DroidmateFrontend"

(tasks.run as JavaExec).configure {

  assert sourceSets.main.runtimeClasspath == classpath

  workingDir rootDir
  java.nio.file.Path argsFile = Paths.get("$rootDir/args.txt")
  if (Files.exists(argsFile))
  {
    List<String> appArgs = argsFile.text.readLines().first().split(" ") as List<String>
    args appArgs
  }
}

dependencies {

  forceJunitPriority 'junit:junit:4.12'
  testCompile 'junit:junit:4.12'

  // See the comment to "evaluationDependsOn" for explanation of these dependencies.
  testCompileOnly files { project(':projects:core').sourceSets.test.groovy.srcDirs }
  testCompileOnly files { project(':projects:reporter').sourceSets.test.kotlin.srcDirs }
  testCompileOnly files { project(':projects:lib-kotlin').sourceSets.test.kotlin.srcDirs }
  testCompileOnly files { project(':projects:lib-common').sourceSets.test.groovy.srcDirs }
  testCompile project(":projects:core").sourceSets.test.output
  testCompile project(":projects:reporter").sourceSets.test.output
  testCompile project(":projects:lib-kotlin").sourceSets.test.output
  testCompile project(":projects:lib-common").sourceSets.test.output
  
  // Necessary to make tests from 'lib-kotlin' work.
  testCompile 'org.xmlunit:xmlunit-core:2.1.1'

  // Necessary to make tests from 'reporter' work.
  testCompile 'org.hamcrest:hamcrest-library:1.3'
  
  // Workaround for: 'gradlew :p:command:test' fails when reporter tests are run from command line.
  // It works when run from IntelliJ or when run with 'gradlew :p:reporter:test'
  testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

  compile project(":projects:apk-inliner")
  compile project(":projects:core")
  compile project(":projects:reporter")
}


apply from: file("test.gradle")

apply from: project(":projects").file("maven.gradle")
// So the published jar to local maven repo with task "install" won't be called command.jar but droidmate.jar
jar.baseName = rootProject.name

apply from: project(":projects").file("debug.gradle")