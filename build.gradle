// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, jamrozik@st.cs.uni-saarland.de
//
// This file is part of the "DroidMate" project.
//
// www.droidmate.org

buildscript {
	repositories {
		mavenCentral()
	}
	apply from: file("${rootProject.projectDir}/versions.gradle") // contains kotlin_version
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${project.ext.kotlin_version}"
//		classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1' // for jitpack gradle support?
		}
}

apply from: file("${rootProject.projectDir}/versions.gradle")

wrapper{
    gradleVersion = '4.10.2'  //define what gradle wrapper version is to be used on wrapper initialization (only if there is no wrapper yet or 'gradlew wrapper' is called)
}

allprojects {
    group = "org.droidmate"
    version = "1.1-SNAPSHOT"

    /* Merge all the build directories into one. */
//	buildDir = rootProject.file('build')  //TODO that means the apk/class paths are changing

    repositories {
//		mavenLocal()
        mavenCentral()
        jcenter()

        maven { url = 'https://jitpack.io' }
    }

    apply plugin: 'java'

    task sourcesJar(type: Jar, dependsOn: "classes") {
        classifier = 'sources'
        from sourceSets.main.allJava
        from sourceSets.main.allSource
        from sourceSets.test.allSource
    }
    apply plugin: 'maven'
    artifacts {
        archives sourcesJar
    }

	apply from: file("${rootProject.projectDir}/versions.gradle")
/* this is necessary as long as we do not publish the library into its own repository, since the CI server does not seam to support composite builds but only multi-project hierarchies */
	configurations.all {
		resolutionStrategy.dependencySubstitution {
			def targetProject = findProject(":deviceDaemonLib")
			if (targetProject != null) {
				def substitution = substitute module("org.droidmate:deviceDaemonLib:${project.ext.driverLib_version}") with project(":deviceDaemonLib")
				if(substitution != null)
					substitution because "the lib is not yet published independently but the ci server cannot resolve includeBuild dependencies"
			}
		}
	}
}

apply from: file("project/log.gradle")
apply from: file("project/functions.gradle")

project.ext { // direct child projects would be childProjects
    pcJvmTargets = subprojects.find() { it.name == 'pcComponents' }.subprojects
}

task Debug {
    println(pcJvmTargets)
}


configure(pcJvmTargets) {

    apply from: file("${rootProject.projectDir}/versions.gradle")

    apply plugin: "kotlin"
    sourceCompatibility = project.ext.javaVersion
    targetCompatibility = project.ext.javaVersion

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        compile 'org.slf4j:slf4j-api:1.7.25'
    }
}

apply plugin: "kotlin"

dependencies {
    compile project(":project:pcComponents:API")
}

jar {
    manifest {
        attributes 'Main-Class': "org.droidmate.API.ExplorationAPI"
    }
}

// include all dependencies (resolvedArtifacts) in publishing (i.e. for publishToMavenLocal)
apply plugin: 'maven-publish'
task resolveDependencies{ doFirst {
	configurations.compile.resolvedConfiguration.resolvedArtifacts.eachWithIndex { resolvedArtifact, n ->

		if (resolvedArtifact.name != "all")
			project.publishing {
				publications {
					println ".m2 publish: $resolvedArtifact"
					"mavenArtifact${resolvedArtifact.name}${n}"(MavenPublication) {
						artifact(resolvedArtifact.file) {
							groupId = resolvedArtifact.moduleVersion.id.group
							artifactId = resolvedArtifact.moduleVersion.id.name
							version = resolvedArtifact.moduleVersion.id.version
							classifier = resolvedArtifact.classifier
						}
					}
				}
			}
	}
}}
publish.dependsOn(resolveDependencies)
